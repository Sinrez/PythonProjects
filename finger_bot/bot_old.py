#source bot_env/bin/activate
# sudo -H python3 -m pip install "celery[redis]" --upgrade 
# pip show python-telegram-bot
# @Ech0echos_bot
# python3 -m venv env

import logging
import config
import ephem
import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

msg = 'ü™ê –ê –µ—â–µ —è –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤ –∫–∞–∫–æ–º —Å–æ–∑–≤–µ–∑–¥–∏–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–ª–∞–Ω–µ—Ç–∞. ü™ê –í–≤–µ–¥–∏—Ç–µ /planet –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä /planet Mars, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å üöÄ'

logging.basicConfig(
    level=logging.INFO,
    filename='bot.log',
    format="%(asctime)s - %(module)s - %(levelname)s - %(funcName)s: %(lineno)d - %(message)s",
    datefmt='%H:%M:%S',
)

async def greet_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    print('–í—ã–∑–≤–∞–Ω /start')
    user_f_name = update.message.chat.first_name
    user_l_name = update.message.chat.last_name
    user_id = update.message.chat.id
    user_nick = update.message.chat.username
    print(f'–ü—Ä–∏—à–µ–ª —é–∑–µ—Ä {user_f_name} {user_l_name} c id = {user_id} –∏ username = {user_nick}')
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user_f_name}! –í—ã –≤—ã–∑–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É /start")
    await update.message.reply_text(msg)

async def talk_to_me(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_text = update.message.text 
    user_nick = update.message.chat.username
    print(f'–Æ–∑–µ—Ä {user_nick} –≤–≤–µ–ª {user_text}')
    await update.message.reply_text(f'{user_text}')

async def planet_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    planet_name = update.message.text.split()[1]
    today = datetime.datetime.now()
    try:
        planet = getattr(ephem, planet_name)(today.strftime('%Y/%m/%d'))
        ephem_answer = ephem.constellation(planet)
        logging.info(planet_name)
        await update.message.reply_text(f'üåú–°–µ–≥–æ–¥–Ω—è –ø–ª–∞–Ω–µ—Ç–∞ {planet_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ–∑–≤–µ–∑–¥–∏–∏ {ephem_answer[1]}üåõ')
    except AttributeError as ae:
        await update.message.reply_text(f'üåö–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –ø–ª–∞–Ω–µ—Ç—ã {planet_name}.üåö')
        logging.info(f'–û—à–∏–±–∫–∞ c –ø–ª–∞–Ω–µ—Ç–æ–π: {ae}')
        print(f'–û—à–∏–±–∫–∞ c –ø–ª–∞–Ω–µ—Ç–æ–π: {ae}')

async def main() -> None:
    try:
        app = ApplicationBuilder().token(config.TOKEN).build()

        app.add_handler(CommandHandler("start", greet_user))
        app.add_handler(CommandHandler("planet", planet_info))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, talk_to_me))
        
        logging.info('–ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª!')
        await app.run_polling()
    except Exception as ex:
        logging.info(f'–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main: {ex}')
        print(f'–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main: {ex}')

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    import asyncio
    asyncio.run(main())